"use client";
import React, { useState } from "react";
import { DragEndEvent, useDndMonitor, useDroppable } from "@dnd-kit/core";

import { cn } from "@/lib/utils";
import { useBuilder } from "@/context/builder-provider";
import {
  FormBlockInstance,
  FormBlocks,
  FormBlockType,
} from "@/@types/form-block.type";
import { generateUniqueId } from "@/lib/helper";

const BuilderCanvas = () => {
  const { addBlock, blocks } = useBuilder();

  const droppable = useDroppable({
    id: "builder-canvas-droppable",
    data: {
      isBuilderCanvasDropArea: true,
    },
  });

  console.log(blocks, "blocks");

  useDndMonitor({
    onDragEnd: (event: DragEndEvent) => {
      console.log("DRAG END", event);
      const { active, over } = event;
      if (!over || !active) return;

      const isBlockBtnElement = active.data?.current?.isBlockBtnElement;
      const overBlock = over?.id;

      // Only allow blocks to be dropped inside Row Block

      // if (isBlockBtnElement {
      //   const blockType = active.data?.current?.blockType;
      //   const newBlock = FormBlocks[blockType as FormBlockType].createInstance(
      //     generateUniqueId()
      //   );
      //   console.log("NEW BLOCK", newBlock);
      //   addBlock(0, newBlock);
      // }

      // Only allow blocks to be dropped inside Row Block
      if (isBlockBtnElement) {
        console.log(isBlockBtnElement, overBlock, "row-block", "");

        const blockType = active.data?.current?.blockType;
        const newBlock = FormBlocks[blockType as FormBlockType].createInstance(
          generateUniqueId()
        );

        addBlock(0, newBlock);
        // const rowBlock = blocks.find((block) => block.id === overBlock);

        // if (rowBlock && rowBlock.blockType === "RowLayout") {
        //   // Add the block to the row's children
        //   rowBlock.blocks?.push(newBlock);
        //   addBlock(0, rowBlock);
        // }
      }
    },
  });
  return (
    <div className="relative w-full h-[calc(100vh_-_64px)] pt-4 pb-5 overflow-y-auto">
      {/* {Droppable Canvas} */}

      <div className="w-full min-h-32 max-w-3xl mx-auto">
        <div
          className="w-full rounded-t-md h-[10px]"
          style={{ backgroundColor: "#2d31fa" }}
        />
        <div
          ref={droppable.setNodeRef}
          className={cn(
            `w-full  bg-white border shadow-md
          flex flex-col flex-grow items-center justify-start py-3 px-3 rounded-b-md`,
            droppable.isOver && "ring-2 ring-primary/20"
          )}
        >
          {droppable.isOver && (
            <div className="relative border border-dotted border-primary bg-primary/10  w-full h-20">
              <div
                className="absolute left-1/2 top-0 -translate-x-1/2 text-xs bg-primary text-white 
          text-center w-28 p-1 rounded-b-full shadow-md"
              >
                Drag it here
              </div>
            </div>
          )}

          {!droppable.isOver && blocks.length === 0 && (
            <div
              className="
            flex flex-col items-center justify-center 
            border border-dotted border-primary 
            bg-primary/10 hover:bg-primary/5  w-full h-20 text-primary font-medium text-base gap-1"
            >
              <p className="text-center text-primary/80">
                Drag and drop a block here to get started
              </p>
            </div>
          )}

          {blocks.length > 0 && (
            <div className="flex flex-col w-full gap-2 p-4">
              {blocks.map((block) => (
                <CanvasBlockWrapper key={block.id} block={block} />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

function CanvasBlockWrapper({ block }: { block: FormBlockInstance }) {
  const CanvasBlock = FormBlocks[block.blockType].canvasComponent;
  return <CanvasBlock blockInstance={block} />;
}

export default BuilderCanvas;
